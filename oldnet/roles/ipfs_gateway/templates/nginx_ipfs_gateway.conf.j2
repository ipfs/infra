upstream multireq {
    server 127.0.0.1:8040;
    server 127.0.0.1:8080 backup;
}

upstream v04x {
    server 127.0.0.1:8080;
}

upstream v03x {
    server 127.0.0.1:18080;
}

map $http_host $pool {
    default "multireq";
    v04x.ipfs.io "v04x";
    v03x.ipfs.io "v03x";
}

server {
    server_name ipfs.io;
    access_log /var/log/nginx/access.log mtail;

    listen 80 default_server;
    listen [::]:80 default_server;
    listen [{{ cjdns_identities[inventory_hostname].ipv6 }}]:80 default_server;

    return 301 https://$http_host$request_uri;
}

server {
    server_name ipfs.io;
    access_log /var/log/nginx/access.log mtail;

    # Based on intermediate profile of Mozilla SSL Configuration Generator
    # See https://mozilla.github.io/server-side-tls/ssl-config-generator
    #
    # PLEASE keep this config and documentation up-to-date!
    #
    # Last updated from Mozilla: 2015-08-28
    #
    # Changes:
    # - use Google's DNS resolvers
    #
    # Steps to produce cert, key, and trustchain files:
    #
    # 1. Generate key & certificate
    #   openssl req -newkey rsa:4096 -nodes -keyout secrets_plaintext/ipfs.io.key -x509 -days 365 -out secrets_plaintext/ipfs.io.crt
    #
    # 2. Generate dhparam:
    #   openssl dhparam -out secrets_plaintext/dhparam.pem 2048
    #
    # 3. Generate CSR for StartSSL (only stuff after -----BEGIN... is relevant)
    #   openssl x509 -in secrets_plaintext/ipfs.io.crt -signkey secrets_plaintext/ipfs.io.key -x509toreq -out secrets_plaintext/ipfs.io.csr
    #
    # 4. Obtain StartSSL Root and Class 3 OV certs
    #   wget https://www.startssl.com/certs/ca.pem
    #   wget https://startssl.com/certs/sca.server3.crt
    #
    # 5. Download the signed certificate from StartSSL, as PEM
    #   cat the-signed-cert.pem > secrets_plaintext/ipfs.io.crt
    #
    # 6. Build trustchains
    #   cat sca.server3.crt >> secrets_plaintext/ipfs.io.crt
    #   cat sca.server3.crt >  secrets_plaintext/ipfs.io.trustchain.crt
    #   cat ca.pem          >> secrets_plaintext/ipfs.io.trustchain.crt
    #
    # Also see: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs

    listen 443 default_server ssl;
    listen [::]:443 default_server ssl;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl_certificate /etc/nginx/certs/ipfs.io.crt;
    ssl_certificate_key /etc/nginx/certs/ipfs.io.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /etc/nginx/certs/dhparam.pem;

    # modern configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload" always;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/nginx/certs/ipfs.io.trustchain.crt;

    resolver 8.8.8.8 8.8.4.4;

    location /blog/ {
        rewrite "^/blog(/.*)$" $1 break;
        proxy_set_header Host blog.ipfs.io;
        proxy_set_header X-Ipfs-Gateway-Prefix /blog;
        proxy_pass http://v04x;
        proxy_read_timeout 1800s;
    }

    location /refs/ {
        rewrite "^/refs(/.*)$" $1 break;
        proxy_set_header Host refs.ipfs.io;
        proxy_set_header X-Ipfs-Gateway-Prefix /refs;
        proxy_pass http://v04x;
        proxy_pass_header Server;
        proxy_read_timeout 1800s;
    }

    error_page 451 /_errors/451.html;
    location /_errors {
        root /usr/share/nginx/html;
    }
    location ~ "^/ipns/Qmbk5dja9CqyrmymV6EdQLzvNo9zCkGyGQKYrL5ya5oHwu" {
        return 451;
    }

    location ~ "^/(ipfs|ipns|api)(/|$)" {
        proxy_set_header Host "";
        proxy_set_header X-Ipfs-Gateway-Prefix "";
        proxy_pass http://$pool;
        proxy_pass_header Server;
        proxy_read_timeout 1800s;
    }

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Ipfs-Gateway-Prefix "";
        proxy_pass http://$pool;
        proxy_pass_header Server;
        proxy_read_timeout 1800s;
    }
}
